use crate::*;
use ::core::task::{Context, Poll};
use derive_prelude::PortUse;
use libp2p::core::*;
use libp2p::swarm::*;

impl NetworkBehaviour for ChordBehaviour {
	// Handler for all the protocols the network behaviour supports.
	type ConnectionHandler = ChordConnectionHandler;
	// Event generated by the NetworkBehaviour and that the swarm will report back.
	type ToSwarm = ChordEvent;

	// Required methods
	fn handle_established_inbound_connection(
		&mut self,
		_connection_id: ConnectionId,
		peer: PeerId,
		local_addr: &Multiaddr,
		remote_addr: &Multiaddr,
	) -> Result<Self::ConnectionHandler, ConnectionDenied> {
		unimplemented!()
	}

	fn handle_established_outbound_connection(
		&mut self,
		_connection_id: ConnectionId,
		peer: PeerId,
		addr: &Multiaddr,
		role_override: Endpoint,
		port_use: PortUse,
	) -> Result<Self::ConnectionHandler, ConnectionDenied> {
		unimplemented!()
	}

	fn on_swarm_event(&mut self, event: FromSwarm<'_>) {
		unimplemented!()
	}

	fn on_connection_handler_event(
		&mut self,
		_peer_id: PeerId,
		_connection_id: ConnectionId,
		_event: <Self::ConnectionHandler as ConnectionHandler>::ToBehaviour,
	) {
		unimplemented!()
	}

	fn poll(
		&mut self,
		cx: &mut Context<'_>,
	) -> Poll<
		ToSwarm<
			Self::ToSwarm,
			<Self::ConnectionHandler as ConnectionHandler>::FromBehaviour,
		>,
	> {
		unimplemented!()
	}
}
